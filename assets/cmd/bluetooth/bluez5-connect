#!/usr/bin/python

from __future__ import absolute_import, print_function, unicode_literals

from optparse import OptionParser, make_option
import re
import sys
import dbus
import dbus.service
import time
import dbus.mainloop.glib
import signal
try:
  from gi.repository import GObject
except ImportError:
  import gobject as GObject
import bluezutils
import time, threading

found = False
AGENT_INTERFACE = 'org.bluez.Agent1'
AGENT_PATH = "/test/agent"
BUS_NAME = 'org.bluez'
bus = None
device_obj = None
expected_dev = None
dev_path = None
compact = False
devices = {}
#options = None
expected = None

mainloop = None
MAX_TIMEOUT = 10

def wait_for_timeout():
	index = 0;
	while(index < 2):
		print(time.ctime())
		time.sleep(MAX_TIMEOUT)
		index = index + 1
	mainloop.quit()
	sys.exit(0)        
	
def print_compact(address, properties):
	name = ""
	address = "<unknown>"

	for key, value in properties.iteritems():
		if type(value) is dbus.String:
			value = unicode(value).encode('ascii', 'replace')
		if (key == "Name"):
			name = value
		elif (key == "Address"):
			address = value

	if "Logged" in properties:
		flag = "*"
	else:
		flag = " "

	print("%s%s %s" % (flag, address, name))
	properties["Logged"] = True

def print_normal(address, properties):
	print("[ " + address + " ]")

	for key in properties.keys():
		value = properties[key]
		if type(value) is dbus.String:
			value = unicode(value).encode('ascii', 'replace')
		if(address == expected):
			if(key == "Connected" ):
				print("%s = %s" %(key,value))
	

	properties["Logged"] = True

def skip_dev(old_dev, new_dev):
	if not "Logged" in old_dev:
		return False
	if "Name" in old_dev:
		return True
	if not "Name" in new_dev:
		return True
	return False


def interfaces_added(path, interfaces):

	#print("I/F added %s %s" %(path,interfaces))
	
	if "org.bluez.Device1" not in interfaces:
		return
	
	properties = interfaces["org.bluez.Device1"]

	if path in devices:
		dev = devices[path]

		if compact and skip_dev(dev, properties):
			return
		devices[path] = dict(devices[path].items() + properties.items())
	else:
		devices[path] = properties

	if "Address" in devices[path]:
		address = properties["Address"]
	else:
		address = "<unknown>"
	print("%s"%expected)
	if (expected == address):
		handle_device(address)
		
	if compact:
		print_compact(address, devices[path])
	else:
		print_normal(address, devices[path])

def properties_changed(interface, changed, invalidated, path):
	#print("properties_changed %s" %path)
	if interface != "org.bluez.Device1":
		return

	
	if path in devices:
		dev = devices[path]

		if compact and skip_dev(dev, changed):
			return
		devices[path] = dict(devices[path].items() + changed.items())
	else:
		devices[path] = changed

	if "Address" in devices[path]:
		address = devices[path]["Address"]
	else:
		address = "<unknown>"
	
	if compact:
		print_compact(address, devices[path])
	else:
		print_normal(address, devices[path])


def ask(prompt):
	try:
		return raw_input(prompt)
	except:
		return input(prompt)

def set_trusted(path):
	props = dbus.Interface(bus.get_object("org.bluez", path),
					"org.freedesktop.DBus.Properties")
	props.Set("org.bluez.Device1", "Trusted", True)
	print("device made trusted")

def dev_connect(path):
	#dev = bus.get_object("org.bluez", path)
	expected_dev.Connect()
	print("connect request send")
	
class Rejected(dbus.DBusException):
	_dbus_error_name = "org.bluez.Error.Rejected"

class Agent(dbus.service.Object):
	exit_on_release = True

	def set_exit_on_release(self, exit_on_release):
		self.exit_on_release = exit_on_release

	@dbus.service.method(AGENT_INTERFACE,
					in_signature="", out_signature="")
	def Release(self):
		print("Release")
		if self.exit_on_release:
			mainloop.quit()

	@dbus.service.method(AGENT_INTERFACE,
					in_signature="os", out_signature="")
	def AuthorizeService(self, device, uuid):
		print("AuthorizeService (%s, %s)" % (device, uuid))
		authorize = ask("Authorize connection (yes/no): ")
		if (authorize == "yes"):
			return
		raise Rejected("Connection rejected by user")

	@dbus.service.method(AGENT_INTERFACE,
					in_signature="o", out_signature="s")
	def RequestPinCode(self, device):
		print("RequestPinCode (%s)" % (device))
		set_trusted(device)
		return ask("Enter PIN Code: ")

	@dbus.service.method(AGENT_INTERFACE,
					in_signature="o", out_signature="u")
	def RequestPasskey(self, device):
		print("RequestPasskey (%s)" % (device))
		set_trusted(device)
		passkey = ask("Enter passkey: ")
		return dbus.UInt32(passkey)

	@dbus.service.method(AGENT_INTERFACE,
					in_signature="ouq", out_signature="")
	def DisplayPasskey(self, device, passkey, entered):
		print("DisplayPasskey (%s, %06u entered %u)" %
						(device, passkey, entered))

	@dbus.service.method(AGENT_INTERFACE,
					in_signature="os", out_signature="")
	def DisplayPinCode(self, device, pincode):
		print("DisplayPinCode (%s, %s)" % (device, pincode))

	@dbus.service.method(AGENT_INTERFACE,
					in_signature="ou", out_signature="")
	def RequestConfirmation(self, device, passkey):
		print("RequestConfirmation (%s, %06d)" % (device, passkey))
		confirm = ask("Confirm passkey (yes/no): ")
		if (confirm == "yes"):
			set_trusted(device)
			return
		raise Rejected("Passkey doesn't match")

	@dbus.service.method(AGENT_INTERFACE,
					in_signature="o", out_signature="")
	def RequestAuthorization(self, device):
		print("RequestAuthorization (%s)" % (device))
		auth = ask("Authorize? (yes/no): ")
		if (auth == "yes"):
			return
		raise Rejected("Pairing rejected")

	@dbus.service.method(AGENT_INTERFACE,
					in_signature="", out_signature="")
	def Cancel(self):
		print("Cancel")

def pair_reply():
	print("Device paired")
	set_trusted(dev_path)
	dev_connect(dev_path)
	#mainloop.quit()

def pair_error(error):
	err_name = error.get_dbus_name()
	if err_name == "org.freedesktop.DBus.Error.NoReply" and device_obj:
		print("Timed out. Cancelling pairing")
		device_obj.CancelPairing()
	else:
		print("Creating device failed: %s" % (error))
	mainloop.quit()
	
def handle_device(mac_id):
	print("handle_device")
	device = bluezutils.find_device(mac_id, options.dev_id)
	if (device is None):
		print("StartDiscovery")
		adapter.StartDiscovery()
	else:
		global expected_dev
		expected_dev = device
		device_properties = dbus.Interface(device,
					"org.freedesktop.DBus.Properties")
		attrib = device_properties.Get("org.bluez.Device1", "Paired")
		started = False
		if(attrib):
			print("device already paired")
			device.Connect()
		else:
			print("device pair request")
			global dev_path
			dev_path = device.object_path
			device.Pair(reply_handler=pair_reply, error_handler=pair_error,
									timeout=60000)


def signal_handler(signal, frame):
    print ("You pressed Ctrl+C!")
    sys.exit(0)

# main function
if __name__ == '__main__':

	option_list = [
			make_option("-i", "--device", action="store",
					type="string", dest="dev_id"),
			]
	parser = OptionParser(option_list=option_list)
	(options, args) = parser.parse_args()
	if len(args) < 1:
		print("Usage: %s <bt-device-mac>" % (sys.argv[0]))
		print("")
		sys.exit(1)
	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	bus = dbus.SystemBus()
	if( bus is None):
		print("dbus-daemon system bus connection failed")
		print("")
		sys.exit(1)
	bus.add_signal_receiver(interfaces_added,
		dbus_interface = "org.freedesktop.DBus.ObjectManager",
		signal_name = "InterfacesAdded"
		)

	bus.add_signal_receiver(properties_changed,
			dbus_interface = "org.freedesktop.DBus.Properties",
			signal_name = "PropertiesChanged",
			arg0 = "org.bluez.Device1",
			path_keyword = "path")


	adapter = bluezutils.find_adapter(options.dev_id)
	if(adapter is None ):
		print("Bluetooth adaptor not found")
		print("")
		sys.exit(1)
	adapter_path = adapter.object_path

	bluez5_properties = dbus.Interface(adapter,"org.freedesktop.DBus.Properties")
	value = dbus.Boolean(1)
	bluez5_properties.Set("org.bluez.Adapter1", "Powered", value)
	bluez5_properties.Set("org.bluez.Adapter1", "Discoverable", value)
	print("Adapter found :%s" %adapter.object_path);
	agent_path = AGENT_PATH
	agent = Agent(bus)

	capability = "NoInputNoOutput"
	#capability = "KeyboardDisplay"
	manager = dbus.Interface(bus.get_object(BUS_NAME, "/org/bluez"), "org.bluez.AgentManager1")
	if(manager is None ):
		print("AgentManager1 not found")
		print("")
		sys.exit(1)
		
	manager.RegisterAgent(AGENT_PATH, capability)
	#manager.RequestDefaultAgent(AGENT_PATH)
	print("Agent registered")
	expected =sys.argv[1]
	om = dbus.Interface(bus.get_object("org.bluez", "/"),
					"org.freedesktop.DBus.ObjectManager")
	objects = om.GetManagedObjects()
	print("Device List")
	for path, interfaces in objects.iteritems():
		if "org.bluez.Device1" not in interfaces:
			continue
		properties = interfaces["org.bluez.Device1"]
		if properties["Adapter"] != adapter_path:
			continue;
		print("%s %s" % (properties["Address"], properties["Alias"]))
		if(properties["Address"] == sys.argv[1]):
				found = True

	if found:
		print("Expected device found")
		handle_device(sys.argv[1])
	else:
		print("device(%s) not found" % sys.argv[1])
		attrib = bluez5_properties.Get("org.bluez.Adapter1", "Discoverable")
		if(attrib == 1):
			print("discoverable")
		attrib = bluez5_properties.Get("org.bluez.Adapter1", "Discovering")
		if(attrib == 1):
			print("discovering")
		else:
			adapter.StartDiscovery()

	hw_thread = threading.Thread(target = wait_for_timeout)
	hw_thread.daemon = True
	hw_thread.start()
	signal.signal(signal.SIGINT, signal_handler)
	mainloop = GObject.MainLoop()
	try:
		mainloop.run()
	except KeyboardInterrupt:
		started = True
		sys.exit(0)

